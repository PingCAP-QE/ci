global_definitions:
  branches: &branches
    - ^feature/v2$
  skip_if_only_changed: &skip_if_only_changed
    "(\\.(md|png|jpeg|jpg|gif|svg|pdf)|Dockerfile|OWNERS|OWNERS_ALIASES)$"
  decoration_config: &decoration_config
    timeout: 2h


# struct ref: https://pkg.go.dev/sigs.k8s.io/prow/pkg/config#Presubmit
presubmits:
  pingcap/tidb-operator:
    - name: pull-e2e
      decorate: true # need add this.
      decoration_config: *decoration_config
      skip_if_only_changed: *skip_if_only_changed
      branches: *branches
      spec:
        nodeSelector:
          node.kubernetes.io/instance-type: e2-highmem-8
        volumes:
          - name: docker-sock-dir
            emptyDir: {}
          - name: data
            ephemeral:
              volumeClaimTemplate:
                metadata:
                  labels:
                    type: ephemeral
                spec:
                  accessModes: ["ReadWriteOnce"]
                  storageClassName: "standard-rwo"
                  resources:
                    requests:
                      storage: 500Gi
        initContainers:
          - name: dind-daemon
            image: docker:28.1-dind
            restartPolicy: Always
            command:
            - /bin/sh
            - -c
            - "dockerd-entrypoint.sh --cgroup-parent /kubepods.slice/kubepods-burstable.slice/kubepods-burstable-pod$(echo ${POD_UID} | tr - _).slice"
            env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            securityContext:
              privileged: true
            volumeMounts:
              - name: docker-sock-dir
                mountPath: /var/run
              - name: data
                mountPath: /var/lib/docker
                subPath: docker
            resources:
              requests:
                memory: "28Gi"
                cpu: "1"
              limits:
                memory: "28Gi"
                cpu: "1"
        containers:
          - name: e2e-runner
            image: ubuntu:22.04
            command: ["/bin/sh", "-ce"]
            args:
              - |
                set -ex
                export DEBIAN_FRONTEND=noninteractive
                apt-get update
                apt-get install -y --no-install-recommends \
                  ca-certificates \
                  curl \
                  git \
                  make \
                  cmake \
                  tar

                # Add Docker's official GPG key
                install -m 0755 -d /etc/apt/keyrings
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
                chmod a+r /etc/apt/keyrings/docker.asc

                # Add the repository to Apt sources
                echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
                  tee /etc/apt/sources.list.d/docker.list > /dev/null
                apt-get update

                # Install Docker CLI
                apt-get install -y --no-install-recommends docker-ce-cli docker-buildx-plugin

                # Install Go 1.23
                curl -fsSL https://go.dev/dl/go1.23.10.linux-amd64.tar.gz | tar -C /usr/local -xz
                export PATH=/usr/local/go/bin:$PATH
                export GOPATH=/go
                export GOCACHE=/tmp/go-cache

                echo "Go version: $(go version)"
                echo "Docker version: $(docker version --format '{{.Client.Version}}')"

                echo "Waiting for Docker daemon to be responsive..."
                timeout_seconds=120
                # Loop until docker info succeeds or timeout is reached
                start_time=$(date +%s)
                while ! docker info > /dev/null 2>&1; do
                  current_time=$(date +%s)
                  elapsed=$((current_time - start_time))
                  if [ $elapsed -ge $timeout_seconds ]; then
                    echo "Error: Docker daemon did not start within ${timeout_seconds} seconds." >&2
                    echo "Listing contents of /var/run to help debug:" >&2
                    ls -la /var/run || echo "Warning: Failed to list /var/run" >&2
                    exit 1
                  fi
                  echo "Waiting for Docker... $(date)"
                  sleep 5
                done
                echo "Docker daemon is responsive."

                make kube
                docker update tidb-operator-control-plane --memory-reservation=6G -c 2048
                docker update tidb-operator-worker -m 16G --memory-swap 16G -c 4096
                docker update tidb-operator-worker2 -m 16G --memory-swap 16G -c 4096
                docker update tidb-operator-worker3 -m 16G --memory-swap 16G -c 4096
                CI=true GINKGO_OPTS='--procs=4' make e2e
            volumeMounts:
              - name: docker-sock-dir
                mountPath: /var/run # Mount the shared socket directory
              - name: data
                mountPath: /data
                subPath: data
            resources:
              requests:
                memory: 28Gi
                cpu: "5"
              limits:
                memory: 28Gi
                cpu: "5"
