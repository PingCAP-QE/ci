# struct ref: https://pkg.go.dev/sigs.k8s.io/prow/pkg/config#Presubmit
global_definitions:
  brancher: &brancher
    branches:
      - ^master$
      - ^release-[0-9]+[.][0-9]+$
  skip_if_only_changed: &skip_if_only_changed "(\\.(md|png|jpeg|jpg|gif|svg|pdf|gitignore)|Dockerfile|OWNERS|OWNERS_ALIASES)$"

presubmits:
  pingcap/tidb:
    - <<: *brancher
      name: pull-check-deps
      decorate: true # need add this.
      skip_if_only_changed: *skip_if_only_changed
      skip_report: true # remove it when test passed
      optional: true # remove it when test passed
      spec:
        containers:
          - name: build
            resources:
              requests: { memory: 128Mi, cpu: "50m" }
              limits: { memory: 256Mi, cpu: "100m" }
            image: golang:1.25
            command: [bash, -ceo, pipefail]
            args:
              - |
                # skip it for batch jobs
                if [[ "${JOB_TYPE:-}" == "batch" ]]; then
                  echo "JOB_TYPE is batch, skip it."
                  exit 0
                fi
                # skip it when the base branch is not in [master, release-X.Y]
                if [[ "${PULL_BASE_REF}" != "master" && ! "${PULL_BASE_REF}" =~ ^release-[0-9]+\.[0-9]+$ ]]; then
                  echo "base branch is not in [master, release-X.Y], skip it."
                  exit 0
                fi

                echo "üí¨ base branch of the PR: ${PULL_BASE_REF}"

                # install tools: jq
                apt-get update && apt-get install -y jq

                ## Check for go module dependencies
                deps=(
                  "github.com/pingcap/kvproto"
                  "github.com/pingcap/tipb"
                  "github.com/tikv/client-go"
                  "github.com/tikv/pd/client"
                  # add more on demand...
                )

                # Define prefix replace KV pairs: key is dep prefix, value is the branch prefix to use.
                declare -A dep_branch_prefix_map=(
                  # For github.com/tikv/client-go, map release-X.Y to tidb-X.Y.
                  ["github.com/tikv/client-go"]="tidb"
                )

                # Function to get expected branch for a dependency
                get_expect_branch() {
                  local dep="$1"
                  local base_branch="$2"
                  for prefix in "${!dep_branch_prefix_map[@]}"; do
                    if [[ "$dep" == "$prefix"* ]]; then
                      # If base_branch is release-X.Y, map to tidb-X.Y
                      if [[ "$base_branch" =~ ^release-([0-9]+\.[0-9]+)$ ]]; then
                        echo "${dep_branch_prefix_map[$prefix]}-${BASH_REMATCH[1]}"
                        return
                      fi
                    fi
                  done
                  # Default: use base branch as is
                  echo "$base_branch"
                }

                for dep in "${deps[@]}"; do
                  echo "üîç checking ${dep} branch..."
                  expect_include_branch=$(get_expect_branch "$dep" "$PULL_BASE_REF")
                  echo "‚ÑπÔ∏è The expected branch of go module ${dep} is '${expect_include_branch}'."

                  # get the repo and commit
                  dep_info=$(go list -m -json "$dep" 2>/dev/null) || {
                    echo "‚ÑπÔ∏è Dependency ${dep} not found in this project, skipping.";
                    continue;
                  }
                  commit=$(echo "$dep_info" | jq -r 'if .Version | test("-[0-9a-f]{12}$") then .Version | split("-") | .[2] else "null" end')
                  if [[ "$commit" == "null" ]]; then
                    echo "‚ÑπÔ∏è Dependency ${dep} is not using a pseudo-version, skipping check."
                    continue
                  fi
                  echo "‚ÑπÔ∏è The commit of go module ${dep} is '${commit}'."

                  # Extract repo URL from module path, handling possible subfolders
                  repo_url=$(echo "$dep_info" | jq -r '.Path' | awk -F/ '{print "https://"$1"/"$2"/"$3".git"}')
                  to_clone_folder=$(basename "$(echo "$dep_info" | jq -r '.Path')")

                  git clone "$repo_url" ../${to_clone_folder} && pushd ../${to_clone_folder}
                    git checkout "${expect_include_branch}" || (
                      echo "‚ùå branch ${expect_include_branch} in ${repo_url} not found"
                      exit 1
                    )

                    # check whether the commit is in the expected branch
                    if ! git merge-base --is-ancestor "$commit" "${expect_include_branch}"; then
                      echo "‚ùå commit ${commit} is not in branch '${expect_include_branch}' of ${repo_url}"
                      exit 1
                    fi
                  popd
                  echo "üéâ ${dep} branch is correct"

                  # clean up for next
                  rm -rf ../${to_clone_folder}
                done

                echo "üéâ All dependencies are correct"
