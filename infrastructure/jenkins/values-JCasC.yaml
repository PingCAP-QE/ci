controller:
  # 'name' is a name of an existing secret in same namespace as jenkins,
  # 'keyName' is the name of one of the keys inside current secret.
  # the 'name' and 'keyName' are concatenated with a '-' in between, so for example:
  # an existing secret "secret-credentials" and a key inside it named "github-password" should be used in Jcasc as ${secret-credentials-github-password}
  # 'name' and 'keyName' must be lowercase RFC 1123 label must consist of lower case alphanumeric characters or '-',
  # and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc')
  additionalExistingSecrets:
    # you should setup the secret `google-oauth2` with key:
    #  `client-id` and `client-secret` before deploy jenkins
    #  in the same namespace.
    - name: google-oauth2
      keyName: client-id
    - name: google-oauth2
      keyName: client-secret

  additionalSecrets: []
  #  - name: nameOfSecret
  #    value: secretText

  JCasC:
    defaultConfig: true
    # Ignored if authorizationStrategy is defined in controller.JCasC.configScripts
    # authorizationStrategy: |-
    # loggedInUsersCanDoAnything:
    #   allowAnonymousRead: true # allow users to read builds logs without logging in.
    authorizationStrategy: |-
      globalMatrix:
        permissions:
        - "Job/Read:anonymous"
        - "Lockable Resources/View:anonymous"
        - "Metrics/View:anonymous"
        - "Overall/Read:anonymous"
        - "Overall/Read:authenticated"
        - "View/Read:anonymous"
        # add more...

    securityRealm: |-
      googleOAuth2:
        # will read from key `client-id` from secret `google-oauth2`
        clientId: "${google-oauth2-client-id}"
        # will read from key `client-secret` from secret `google-oauth2`
        clientSecret: "${google-oauth2-client-secret}"

    configScripts:
      #  welcome-message: |
      #    jenkins:
      #      systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
      # Ignored if securityRealm is defined in controller.JCasC.configScripts and
      # ignored if controller.enableXmlConfig=true as controller.securityRealm takes precedence
      # securityRealm: |
      #   jenkins:
      #     securityRealm:
      #       googleOAuth2:
      #         # will read from key `client-id` from secret `google-oauth2`
      #         clientId: "${google-oauth2-client-id}"
      #         # will read from key `client-secret` from secret `google-oauth2`
      #         clientSecret: "${google-oauth2-client-secret}"
