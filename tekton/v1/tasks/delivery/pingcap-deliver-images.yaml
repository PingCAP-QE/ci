# yaml-language-server: $schema=https://github.com/redhat-developer/vscode-tekton/raw/refs/heads/main/scheme/tekton.dev/v1_Task.json
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: pingcap-deliver-images
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "1.0.0"
    tekton.dev/categories: delivery
    tekton.dev/tags: images,delivery
    tekton.dev/displayName: "PingCAP product image delivery"
    tekton.dev/platforms: "linux/amd64,linux/arm64"
spec:
  params:
    - name: src
    - name: src-type
      description: Type of the image parameter
      default: image-url
      enum:
        - image-url # container image url
        - images-info # yaml/json content that stored images information return by image build task
    - name: delivery-config-url
      description: URL of the delivery configuration file
      default: https://raw.githubusercontent.com/PingCAP-QE/artifacts/main/packages/delivery.yaml
    - name: generator-script-url
      description: URL of the generator script
      default: https://raw.githubusercontent.com/PingCAP-QE/artifacts/main/packages/scripts/gen-delivery-image-commands.ts
    - name: retries
      description: Number of retries for image delivery step
      default: "3"
    - name: notify-webhook-url
      description: URL of the webhook for notification
      default: "http://el-notify.ee-cd.svc:8080"
  steps:
    - name: generate
      image: docker.io/denoland/deno:alpine-2.0.6 # it has `wget` tool.
      results:
        - name: generated
          type: string
        - name: target
          type: string
      script: |
        #!/bin/sh
        set -e

        wget -O delivery.yaml $(params.delivery-config-url)
        script="/workspace/delivery.sh"
        targetsInfo="/workspace/delivery-targets.yaml"
        img_src="$(params.src)"
        if [ "$(params.src-type)" = "image-url" ]; then
          deno run --allow-read --allow-write "$(params.generator-script-url)" \
            --image_url="$img_src" \
            --yaml_file=delivery.yaml \
            --outfile=$script \
            --images_outfile=$targetsInfo
        elif [ "$(params.src-type)" = "images-info" ]; then
          echo "$img_src" > /workspace/src.txt
          deno run --allow-read --allow-write "$(params.generator-script-url)" \
            --images_file="/workspace/src.txt" \
            --outfile=$script \
            --images_outfile=$targetsInfo
        fi

        if [ -f "$script" ]; then
          echo -n "true" > $(step.results.generated.path)
        else
          echo -n "false" > $(step.results.generated.path)
        fi
    - name: run
      when:
        - input: "$(steps.generate.results.generated)"
          operator: in
          values: ["true"]
      image: gcr.io/go-containerregistry/crane/debug:latest
      computeResources:
        requests:
          cpu: 50m
          memory: 128Mi
      script: |
        #!/busybox/sh
        set -e

        script="/workspace/delivery.sh"
        chmod +x $script
        tries=0
        max_retries=$(params.retries)
        until $script; do
          tries=$((tries + 1))
          if [ $tries -ge $max_retries ]; then
            echo "Script '$script' failed after $max_retries attempts."
            exit 1
          fi
          echo "Script '$script' failed. Retrying in 10 seconds... ($tries/$max_retries)"
          sleep 10
        done
    - name: post-notify
      image: ghcr.io/pingcap-qe/cd/utils/release:v2025.10.26-5-ge8130cb
      when:
        - input: "$(steps.generate.results.generated)"
          operator: in
          values: ["true"]
        - input: "$(params.notify-webhook-url)"
          operator: notIn
          values: ["false", ""]
      script: |
        #!/usr/bin/env bash
        set -e

        # prepare event data
        targetsInfo="/workspace/delivery-targets.yaml" # output from the previous steps
        yq --output-format json . "$targetsInfo" | tee event.json

        # send cloud-events to tekton event listener
        curl -X POST "$(params.notify-webhook-url)" \
        -H "Content-Type: application/cloudevents+json" \
        -H "ce-specversion: 1.0" \
        -H "ce-id: $(uuidgen)" \
        -H "ce-type: net.pingcap.tibuild.notify.delivery.images.success" \
        -H "ce-source: tekton/taskRun/$(context.taskRun.name)" \
        --data-binary @event.json
