# yaml-language-server: $schema=https://github.com/redhat-developer/vscode-tekton/raw/refs/heads/main/scheme/tekton.dev/v1_Task.json
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: pingcap-deliver-images
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "1.0.0"
    tekton.dev/categories: delivery
    tekton.dev/tags: images,delivery
    tekton.dev/displayName: "PingCAP product image delivery"
    tekton.dev/platforms: "linux/amd64,linux/arm64"
spec:
  params:
    - name: src
    - name: src-type
      description: Type of the image parameter
      default: image-url
      enum:
        - image-url # container image url
        - images-info # yaml/json content that stored images information return by image build task
    - name: delivery-config-url
      description: URL of the delivery configuration file
      default: https://raw.githubusercontent.com/PingCAP-QE/artifacts/main/packages/delivery.yaml
    - name: generator-script-url
      description: URL of the generator script
      default: https://raw.githubusercontent.com/PingCAP-QE/artifacts/main/packages/scripts/gen-delivery-image-commands.ts
    - name: retries
      description: Number of retries for image delivery step
      default: "3"
  steps:
    - name: gen-commands-for-image-url
      image: docker.io/denoland/deno:alpine-2.0.6 # it has `wget` tool.
      when:
        - input: $(params.src-type)
          operator: in
          values: [image-url]
      script: |
        wget -O delivery.yaml $(params.delivery-config-url)
        deno run --allow-read --allow-write "$(params.generator-script-url)" \
          --image_url="$(params.src)" \
          --yaml_file=delivery.yaml \
          --outfile=/workspace/delivery.sh
    - name: gen-commands-for-images-info
      image: docker.io/denoland/deno:alpine-2.0.6 # it has `wget` tool.
      when:
        - input: $(params.src-type)
          operator: in
          values: [images-info]
      script: |
        wget -O delivery.yaml $(params.delivery-config-url)

        # write param `src` content to temp file
        echo "$(params.src)" > /workspace/src.txt
        deno run --allow-read --allow-write "$(params.generator-script-url)" \
          --images_file="/workspace/src.txt" \
          --yaml_file=delivery.yaml \
          --outfile=/workspace/delivery.sh
    - name: run-commands
      image: gcr.io/go-containerregistry/crane/debug:latest
      computeResources:
        requests:
          cpu: 50m
          memory: 128Mi
      script: |
        #!/busybox/sh
        set -e

        script="/workspace/delivery.sh"
        if [ ! -f "$script" ]; then
          echo "No build script, skip it."
          exit 0
        fi

        chmod +x $script
        tries=0
        max_retries=$(params.retries)
        until $script; do
          tries=$((tries + 1))
          if [ $tries -ge $max_retries ]; then
            echo "Script '$script' failed after $max_retries attempts."
            exit 1
          fi
          echo "Script '$script' failed. Retrying in 10 seconds... ($tries/$max_retries)"
          sleep 10
        done
