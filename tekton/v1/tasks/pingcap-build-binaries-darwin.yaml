apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pingcap-build-binaries-darwin
  labels:
    app.kubernetes.io/version: "2.0"
  annotations:
    tekton.dev/platforms: "linux/amd64,linux/arm64"
spec:
  description: >-
    Build binaries for the component.
  workspaces:
    - name: source
      description: source code.
    - name: ssh-directory
      description: ssh credential for remote building on mac.
  results:
    - description: Just built and pushed artifacts, it will be a yaml content.
      name: pushed
  params:
    - name: component
    - name: os
      default: darwin
    - name: arch
      default: amd64
    - name: version
      type: string
      description: the version to releasing.
    - name: profile
      type: string
      default: release
      description: >
        supports: 'release' or 'failpoint'.
    - name: git-ref
    - name: git-sha
    - name: builder-image
      default: ghcr.io/pingcap-qe/cd/utils/release:v2025.8.17-13-ga5750d9
    - name: release-dir
      default: build
    - name: push
      type: string
      default: "false"
    - name: registry
      default: hub.pingcap.net
    - name: boskos-server-url
      description: The URL of the running boskos server
      default: "http://boskos.test-pods.svc.cluster.local"
  steps:
    - name: generate
      image: ghcr.io/pingcap-qe/cd/utils/release:v2025.8.17-13-ga5750d9
      results:
        - name: generated
          type: string
      script: |
        git clone --depth=1 --branch=main https://github.com/PingCAP-QE/artifacts.git /workspace/artifacts

        git_ref="$(params.git-ref)"
        git_sha="$(params.git-sha)"
        if [ "$git_sha" == "$git_ref" ]; then
          git_sha=""
        fi

        out_script="/workspace/build-package-artifacts.sh"
        /workspace/artifacts/packages/scripts/gen-package-artifacts-with-config.sh \
          $(params.component) \
          $(params.os) \
          $(params.arch) \
          $(params.version) \
          $(params.profile) \
          $git_ref \
          "$git_sha" \
          /workspace/artifacts/packages/packages.yaml.tmpl \
          "$out_script" \
          $(params.registry)

        if [ -f "$out_script" ]; then
          echo -n "true" > $(step.results.generated.path)
          sed -i 's/fetch_file_from_oci_artifact hub.pingcap.net/fetch_file_from_oci_artifact hub-mig.pingcap.net/g' "$out_script"
          cat "$out_script"
        else
          echo -n "false" > $(step.results.generated.path)
          echo "ðŸ¤· no output script generated!"
          printf '"{}"' > $(task.results.pushed.path)
        fi
    - name: prepare-remote-env-file
      image: "$(params.builder-image)"
      when:
        - input: "$(steps.generate.results.generated)"
          operator: in
          values: ["true"]
      script: |
        :> /workspace/remote.env

        # 1. set locale lang
        echo "export LC_ALL=C.UTF-8" >> /workspace/remote.env

        # 2. optional get go builder in PATH env var, got the go version(x.y) from the current container with `go version`.
        if go version; then
          go_bin_path="/usr/local/$(go version | cut -d ' ' -f 3 | cut -d '.' -f -2)/bin"
          echo "export PATH=${go_bin_path}:\$PATH" >> /workspace/remote.env
        fi

        # 3. set npm mirror and node options
        echo 'export NPM_CONFIG_REGISTRY="https://registry.npmmirror.com"' >> /workspace/remote.env
        echo 'export NODE_OPTIONS="--max_old_space_size=8192"' >> /workspace/remote.env

        # 4. optional set for rust
        echo 'export CARGO_NET_GIT_FETCH_WITH_CLI=true' >> /workspace/remote.env
        # echo 'export RUSTUP_DIST_SERVER="https://rsproxy.cn"' >> /workspace/remote.env
        # echo 'export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"' >> /workspace/remote.env
    - name: build
      image: docker.io/denoland/deno:alpine-2.1.3
      when:
        - input: "$(steps.generate.results.generated)"
          operator: in
          values: ["true"]
      env:
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
      workingDir: $(workspaces.source.path)/$(params.component)
      # TODO: get the user and host by better way.
      script: |
        script="/workspace/build-package-artifacts.sh"
        if [ ! -f "$script" ]; then
          echo "No build script, skip it."
          exit 0
        fi
        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" != "true" ] ; then
          echo "No ssh directory bound, we need it."
          exit 1
        fi

        env_file="/workspace/remote.env"
        deno run --allow-all https://github.com/PingCAP-QE/artifacts/raw/refs/heads/main/packages/scripts/build-in-darwin-boskos.ts \
          --sshInfoDir ${WORKSPACE_SSH_DIRECTORY_PATH} \
          --sourcePath $(workspaces.source.path) \
          --envFile ${env_file} \
          --scriptFile ${script} \
          --component $(params.component) \
          --boskos.serverUrl $(params.boskos-server-url) \
          --boskos.type mac-machine-$(params.arch) \
          --boskos.owner $(context.taskRun.name) \
          --releaseDir $(params.release-dir)
    - name: publish
      image: ghcr.io/pingcap-qe/cd/utils/release:v2025.8.17-13-ga5750d9
      when:
        - input: "$(steps.generate.results.generated)"
          operator: in
          values: ["true"]
      workingDir: $(workspaces.source.path)/$(params.component)
      script: |
        script="/workspace/build-package-artifacts.sh"

        for f in $(find $(params.release-dir) -name "*.tar.gz"); do
          tar -tf $f
        done

        oras version
        # try 2 times.
        "$script" -p -w "$(params.release-dir)" -o $(results.pushed.path) || \
        "$script" -p -w "$(params.release-dir)" -o $(results.pushed.path)
